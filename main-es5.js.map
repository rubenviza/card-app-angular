{"version":3,"sources":["webpack:///src/environments/environment.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/card/card.component.ts","webpack:///src/app/components/card/card.component.html","webpack:///src/app/services/people.service.ts","webpack:///src/app/app-routing.module.ts","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["environment","production","AppComponent","peopleservice","title","observpeople","getPeople","pipe","info","data","error","caught","AppModule","CardComponent","PeopleService","http","get","routes","AppRoutingModule","forRoot","bootstrapModule","err","console","webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id"],"mappings":"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","file":"main-es5.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { Component } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Person } from './models/person';\r\nimport { ResultSet } from './models/result-set';\r\nimport { PeopleService } from './services/people.service';\r\nimport { catchError, map } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n  title = \"Cards App\";\r\n/* // Funciona para llamar *ngFor en el html asi .... (observpeople | async).data\r\n  observpeople:Observable<ResultSet<Person>>;\r\n  constructor(private peopleservice:PeopleService){\r\n    this.observpeople = peopleservice.getPeople();\r\n  }\r\n*/\r\n  observpeople:Observable<Array<Person>>;\r\n\r\n  constructor(private peopleservice:PeopleService){\r\n    this.observpeople = peopleservice.getPeople().pipe(\r\n          map((info) => {\r\n            return info.data;\r\n          }),\r\n          catchError((error, caught) => {\r\n            return [];\r\n          })\r\n      );\r\n  }\r\n}\r\n","<h1 class=\"title\">{{ title }}</h1>\r\n<div class=\"container\">\r\n  <div class=\"row\">\r\n  <!-- <div class=\"col-md-4\" style=\"padding: 10px;\" *ngFor=\"let item of (observpeople | async).data\"></div>  -->\r\n    <div class=\"col-md-4\" style=\"padding: 10px;\" *ngFor=\"let item of observpeople | async\">\r\n      <app-card [person]=\"item\"></app-card>\r\n    </div>\r\n  </div>\r\n</div>","import { HttpClientModule } from \"@angular/common/http\";\r\nimport { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { CardComponent } from './components/card/card.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    CardComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    HttpClientModule,\r\n    AppRoutingModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component, Input, OnInit } from '@angular/core';\r\nimport { Person } from 'src/app/models/person';\r\n\r\n@Component({\r\n  selector: 'app-card',\r\n  templateUrl: './card.component.html',\r\n  styleUrls: ['./card.component.scss']\r\n})\r\nexport class CardComponent implements OnInit {\r\n\r\n  @Input() person:Person;\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<div class=\"card\">\r\n    <img class=\"avatar\" src=\"{{ person.avatar }}\" alt=\"{{ person.first_name + ' ' + person.last_name}}\" />\r\n    <h1>{{ person.first_name +\" \"+ person.last_name }}</h1>\r\n    <p class=\"email\">{{ person.email }}</p>\r\n    <p>Last update: {{ person.last_update }}</p>\r\n    <div class=\"footer\"><button>Save as Favourite</button>\r\n    </div>\r\n</div>\r\n","import { Injectable } from '@angular/core';\r\nimport { peopleMockData } from '../mocks/mock-data';\r\nimport { Observable, of } from 'rxjs';\r\nimport { HttpClient} from '@angular/common/http';\r\nimport { ResultSet } from '../models/result-set';\r\nimport { Person } from '../models/person';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class PeopleService {\r\n\r\n  constructor( private http: HttpClient) { }\r\n\r\n  //TODO: implement using \"https://reqres.in/api/users\"\r\n  getPeople(): Observable<ResultSet<Person>> {\r\n    return this.http.get<ResultSet<Person>>(\"https://reqres.in/api/users\");    // con data de API\r\n    //return of(peopleMockData);   // con data en mock.data.ts\r\n    \r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nconst routes: Routes = [];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}